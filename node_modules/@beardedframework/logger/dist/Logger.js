"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const appRoot = require("app-root-path");
const chalk_1 = require("chalk");
/*
 *
 * @class Logger
 * */
class Logger {
    /*
     *
     * The log of warning
     * @param {string} message
     * @return {void}
     * */
    static warning(...args) {
        console.log(args);
        if (args.length > 1) {
            args.unshift(Logger.logType[2]);
            console.warn(args);
            return;
        }
        const msg = Logger.msgFormatter(2, args[0]);
        Logger.logToFile(chalk_1.default.yellow(msg));
    }
    /*
     * The log of info
     * @param {string} message
     * @return {void}
     * */
    static info(...args) {
        if (args.length > 1) {
            args.unshift(Logger.logType[3]);
            console.log(args);
            return;
        }
        const msg = Logger.msgFormatter(3, args[0]);
        console.log(msg.slice(0, -2));
        Logger.logToFile(msg);
    }
    /*
     * The log of count
     * @param {string} lable
     * @return {void}
     * */
    static count(label) {
        console.count(label);
    }
    /*
     * The log lod assert
     * @param {string} message
     * @return {{void}
     * */
    static assert(message) {
        console.assert(false, "You have no element with ID 'demo'");
    }
    /*
     * The log of error
     * @param {string} message
     * @param {error} err
     * @return {void}
     * */
    static error(...args) {
        //const caller_line = err.stack.split("\n")[4];
        //const index = caller_line.indexOf("at ");
        //const clean = caller_line.slice(index+2, caller_line.length);
        if (args.length > 1) {
            args.unshift(Logger.logType[1]);
            console.error(args);
            return;
        }
        const msg = Logger.msgFormatter(1, args[0]);
        const err = args['err'];
        if (err != null) {
            console.error(msg.slice(0, -2), err);
            Logger.logToFile(chalk_1.default.red(msg), chalk_1.default.red(err));
            return;
        }
        console.error(msg.slice(0, -2));
        Logger.logToFile(chalk_1.default.red(msg));
        console.trace();
    }
    /*
     *
     * The log on file
     * @param {string} message
     * @param {error} errTOp
     * @return {void}
     * */
    static logToFile(msg, errTop = null) {
        if (!this.mustLogToFile)
            return;
        fs.appendFile(`${appRoot}/${Logger.logPathAndFile}`, msg, function (err) {
            if (err)
                console.error(Logger.logType[1], 'There was an error writing the file', err);
            //console.log(Logger.msgFormatter(3, 'log writed on file succefully'));
        });
    }
    /*
     * message formatter
     * @param {int} logType
     * @param {string} message
     * @return {void}
     * */
    static msgFormatter(logType, message) {
        if (typeof message === 'object')
            return `${Logger.logType[logType]} | msg: ${JSON.stringify(message)} \n`;
        return `${Logger.logType[logType]} | msg: ${message} \n`;
    }
    /*
     * name of the current file
     * @return {string}
     * */
    static fileName() {
        return path.basename(__filename);
    }
}
/*
 * @var {Array} the type if log
 * */
Logger.logType = { 1: 'ERROR', 2: 'WARNING', 3: 'LOG' };
/*
 * @var {boolean} file need to be created?
 * */
Logger.mustLogToFile = true;
/*
 * @var {string} the path and filename to save the log
 * */
Logger.logPathAndFile = '/storage/bearded.log';
exports.default = Logger;
//# sourceMappingURL=Logger.js.map