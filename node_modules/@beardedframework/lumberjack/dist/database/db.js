"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const selector_1 = require("./selector");
const to_1 = require("../services/to");
/*
 * @class DB
 */
class DB {
    /*
     *
     * @return { DB }
     */
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    /*
     * class constructor
     *
     */
    constructor() {
        this.selector = new selector_1.default();
    }
    /*
     * update the model data
     * @param { mode/Model } modelInstance
     * @return { Promise }
     * */
    update(modelInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.selector.update(modelInstance);
        });
    }
    /*
     * create a new entry of model on database
     * @param { mode/Model } modelInstance
     * @return { Promise }
     * */
    save(modelInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.selector.save(modelInstance);
        });
    }
    /*
     * return the column names of the given table model
     * @param { mode/Model } modelInstance
     * @return { Promise }
     *
     * */
    columns(modelInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let fields = [];
                let err, response;
                [err, response] = yield to_1.default(this.selector.freeStatement(`describe ${modelInstance.table}`));
                //[err, response] = await to(this.selector.freeStatement(`\d+ ${modelInstance.table}`));
                if (err && !response)
                    reject(err);
                for (let el of response) {
                    fields.push(el.Field);
                }
                resolve(fields);
            }));
        });
    }
}
exports.default = DB;
//# sourceMappingURL=db.js.map