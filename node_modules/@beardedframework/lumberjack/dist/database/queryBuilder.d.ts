export default class queryBuilder {
    private query;
    private paginator;
    private selector;
    private queryCaseWhens;
    constructor(tableName?: any);
    select(...args: any[]): queryBuilder;
    where(field: string, operator: string, value: any, model?: any): queryBuilder;
    whereIn(field: string, values: Array<any>): queryBuilder;
    whereBetween(field: string, firstValue: string, secondValue: string): queryBuilder;
    orWhere(field: string, operator: string, value: any): queryBuilder;
    caseSelect(identifier: string, callable: Function): queryBuilder;
    ifSelect(identifier: string, condition: string, valueIfTrue: string, valueIfFalse: string): queryBuilder;
    when(firstArgument: string, operator: any, secondArgument: string, then: string): queryBuilder;
    join(secondTable: string, firstTableColumnName: any, operator: string, secondTableColumnName: any): queryBuilder;
    outerJoin(secondTable: string, firstTableColumnName: any, operator: string, secondTableColumnName: any): queryBuilder;
    rightJoin(secondTable: string, firstTableColumnName: any, operator: string, secondTableColumnName: any): queryBuilder;
    leftJoin(secondTable: string, firstTableColumnName: any, operator: string, secondTableColumnName: any): queryBuilder;
    orderBy(order: string): queryBuilder;
    groupBy(field: string): queryBuilder;
    get(): any;
    first(): any;
    limit(size: number): queryBuilder;
    paginate(page: number, limit?: number, links?: number): Promise<any>;
    private buildQryString();
    setModel(model: any): void;
    private linkGenerator();
    private whereCompleter(field, operator, value, concater?);
    static fetchAllrows(model: any): Promise<any>;
    static fetchAllpaginated(model: any, page?: number): Promise<any>;
    static findRow(id: number, model: any): Promise<any>;
}
