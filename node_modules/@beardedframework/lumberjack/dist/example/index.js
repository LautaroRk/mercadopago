"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const User_1 = require("../models/User");
const to_1 = require("../services/to");
const logger_1 = require("@beardedframework/logger");
dotenv_1.config();
const update = () => __awaiter(this, void 0, void 0, function* () {
    let user = yield User_1.default.find(1);
    user.data.name = "updated namsssse";
    user.save();
    let updated = yield User_1.default.find(1);
});
const save = () => __awaiter(this, void 0, void 0, function* () {
    let err, userCreated;
    const user = User_1.default.create({
        'name': 'my name',
        'email': 'myemail@email.com',
        'api_token': '12321312312321231',
        'lastname': 'my lastname',
        'password': 'my password'
    });
    [err, userCreated] = yield to_1.default(user.save());
    if (err || !userCreated) {
        logger_1.default.error(err);
    }
    else
        logger_1.default.info(userCreated);
});
const met = () => __awaiter(this, void 0, void 0, function* () {
    logger_1.default.info('met');
    //let user = await User.find(1);
    //let users = await User.fetchAll();
    //console.log(users.toJson());
    //console.log(user.toJson());
    //console.log(user.toJson());
    /*const page = 1;
    let userResponse = await User.select('*')
    .paginate(page);
  //.get();*/
    //console.log(userResponse);/*
    let us, err;
    [err, us] = yield to_1.default(User_1.default.fetchPaginated(1));
    if (err)
        logger_1.default.error(err);
    //console.log(userResponse.toArray());
    logger_1.default.info(us);
    //console.log(userResponse.toArray());
});
//update();
//save();
met();
//# sourceMappingURL=index.js.map