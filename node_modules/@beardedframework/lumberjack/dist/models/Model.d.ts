import queryBuilder from '../database/queryBuilder';
export default class Model extends queryBuilder {
    protected table: string;
    protected fillable: Array<string>;
    protected hidden: Array<string>;
    protected data: any;
    private fields;
    private DatetimeValues;
    constructor(data?: any);
    save(): Promise<any>;
    toJson(): object;
    toArray(): Array<any>;
    protected hasManyToMany(otherModel: any, pivotTable: string, otherPivot: string, myPivot: string, otherIndex?: string, myIndex?: string): Promise<any>;
    protected hasMany(otherModel: any, otherIndex: string, myIndex: string): Promise<any>;
    protected belongsToMany(otherModel: any, otherIndex: string, myIndex: string): Promise<any>;
    protected belongsTo(otherModel: any, otherIndex: string, myIndex: string): Promise<any>;
    protected hasOne(otherModel: any, otherIndex: string, myIndex: string): Promise<any>;
    static create(data: any): any;
    static find(id: number): Promise<any>;
    static fetchPaginated(page?: number): Promise<any>;
    static fetchAll(): Promise<any>;
    static select(...args: any[]): queryBuilder;
    static where(field: string, comparer: string, value: any): queryBuilder;
    private fillHiddenValuesEmptyOnNewElement();
    private columns();
}
