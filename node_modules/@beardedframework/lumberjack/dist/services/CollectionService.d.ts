export default class CollectionService {
    private elements;
    constructor(_elements: Array<any>, modelStatic: any);
    toJson(): Array<any>;
    toArray(): Array<any>;
    chunk(size: number): Array<any>;
    concat(...args: any[]): Array<any>;
    drop(size?: number): Array<any>;
    dropFromLast(size?: number): Array<any>;
    fill(...args: any[]): Array<any>;
    findIndex(func: Function): number;
    findLastIndex(func: Function): number;
    indexOf(element: any): number;
    lastIndexOf(element: any): number;
    intersection(otherArray: Array<any>): Array<any>;
    flatten(): Array<any>;
    first(): any;
    last(): any;
    getByIndex(index: number): any;
    pull(values: Array<any>): Array<any>;
    pullAt(values: Array<number>): Array<any>;
    reverse(): Array<any>;
    take(size: number): Array<any>;
    takeFromLast(size: number): Array<any>;
    takeWhile(func: Function): Array<any>;
    union(...args: any[]): Array<any>;
    unique(): Array<any>;
    countBy(func: Function): boolean;
    every(func: Function): boolean;
    filter(func: Function): Array<any>;
    reject(func: Function): Array<any>;
    sample(): any;
    sampleSize(size: number): Array<any>;
    shuffle(): Array<any>;
    size(): number;
    sortBy(func: Function): Array<any>;
    has(element: any): boolean;
    forEach(func: Function): Array<any>;
    map(func: Function): Array<any>;
    groupBy(func: Function): Array<any>;
    orderBy(func: Function): Array<any>;
    reduce(func: Function): Array<any>;
    partition(func: Function): Array<any>;
    includes(element: any): boolean;
    find(func: Function): any;
    findLast(func: Function): any;
    flatMap(func: Function): Array<any>;
    private toArrayOrJson(isArray?);
}
